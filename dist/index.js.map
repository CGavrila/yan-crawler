{"version":3,"sources":["src/index.js"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["'use strict';\n\nimport * as _ from 'lodash';\nimport * as request from 'request';\nimport * as cheerio from 'cheerio';\n\nvar debug = require('debug')('Crawler');\nvar EventEmitter = require('events').EventEmitter;\n\nlet _singleton = Symbol();\n\n/**\n *\n * Singleton class used to scrape websites based on templates and a queue.\n *  - the queue contains the URLs which will be retrieved and then processed as defined by its matching template\n\n *\n */\nclass Crawler extends EventEmitter {\n\n    constructor(singletonToken) {\n        super();\n        if (_singleton !== singletonToken)\n            throw new Error('Crawler is a singleton class, cannot instantiate directly.');\n\n        this.entries = {};\n\n        /* Default interval to wait between requests for the same entry (milliseconds) */\n        this.DEFAULT_INTERVAL = 1000;\n    }\n\n    static get instance() {\n        if(!this[_singleton])\n            this[_singleton] = new Crawler(_singleton);\n\n        return this[_singleton]\n    }\n\n    /**\n     * Used to destroy the current instance of the class (it's a Singleton).\n     * Particularly useful for testing.\n     */\n    static destroyInstance() {\n        this[_singleton] = null;\n    }\n\n    /**\n     * Adds a template to the scraper.\n     *\n     * @param {object} template - The properties of the template, including name, matchesFormat, interval and callback.\n     */\n    addEntry(entry) {\n        if (!entry.name) throw new Error('Entry name is missing.');\n        if (!entry.url) throw new Error('Entry url is missing.');\n        if (!entry.callback) throw new Error('Entry callback is missing.');\n\n        if (!('interval' in entry)) entry.interval = this.DEFAULT_INTERVAL;\n\n        this.entries[entry.name] = entry;\n    }\n\n    /**\n     * Retrieves the current templates used by the scraper.\n     *\n     * @returns {{}|*} - An array of objects.\n     */\n    getEntries() {\n        return this.entries;\n    }\n\n    /**\n     * Starts the whole process of looping through the queue.\n     */\n    start() {\n        var that = this;\n        _.forEach(this.entries, function(entry) {\n            function makeRequest() {\n                debug('Making request for ' + entry.url);\n                that._makeRequest(entry.url, entry.callback);\n            }\n\n            setTimeout(makeRequest, 0);\n            setInterval(makeRequest, entry.interval);\n        })\n    }\n\n    /**\n     * Makes a request to a specific URL and then applies the callback specified in its template.\n     *\n     * @param {String} url - An URL to be requested.\n     * @param {Object} template - The corresponding template matching the URL provided.\n     * @private\n     */\n    _makeRequest(url, callback) {\n        /* TODO: take care of other responses than 200. */\n\n        let that = this;\n\n        request.get(url, function (error, response, body) {\n            if (!error && response.statusCode == 200) {\n                debug('Got results for ' + url);\n                let result = callback(body, cheerio.load(body));\n                that.emit('result', result);\n            }\n        });\n    }\n}\n\nexport default Crawler;"]}